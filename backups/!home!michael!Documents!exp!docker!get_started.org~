* Docker | Getting Started
:PROPERTIES:
  :header-args: :results verbatim
  :END:
  
The getting started tutorial consists of the following parts:

1. Set up docker environment
2. Build an image and run it as a container
3. Set up and use a kubernetes environment
4. Share containerized applications on dockerhub

** Set Up Docker Environment

Fundamentally, a container is nothing but a running process with some added encapsulation features applied to it in order to keep it isolated from the host and from other containers. 

Each container interacts with its own private filesystem provided by a Docker Image. 

*** Install Docker 

#+BEGIN_SRC sh
pacman -S docker
#+END_SRC

#+RESULTS:

*** Start and Enable the Docker Service 

#+BEGIN_SRC sh
sudo systemctl start docker.service
sudo systemctl enable docker.service
#+END_SRC

#+RESULTS:

Check that it worked:

#+BEGIN_SRC sh
sudo docker info
#+END_SRC

#+RESULTS:

*** Add user to docker group

By default docker can only run as root. When we add a user to the docker group, we effectively give them root access.

#+BEGIN_SRC sh
sudo groupadd docker
sudo usermod -aG docker <username>
#+END_SRC

Now, after logging out and logging back in we should be able to run docker without sudo as a regular user.

#+BEGIN_SRC sh :results raw
docker info
#+END_SRC

#+RESULTS:
Client:
 Debug Mode: false

Server:
 Containers: 2
  Running: 0
  Paused: 0
  Stopped: 2
 Images: 1
 Server Version: 19.03.5-ce
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: true
  Native Overlay Diff: false
 Logging Driver: json-file
 Cgroup Driver: cgroupfs
 Plugins:
  Volume: local
  Network: bridge host ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
 Swarm: inactive
 Runtimes: runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: d50db0a42053864a270f648048f9a8b4f24eced3.m
 runc version: d736ef14f0288d6993a1845745d6756cfc9ddd5a
 init version: fec3683
 Security Options:
  seccomp
   Profile: default
 Kernel Version: 5.4.1-arch1-1
 Operating System: Arch Linux
 OSType: linux
 Architecture: x86_64
 CPUs: 12
 Total Memory: 30.79GiB
 Name: shulgin
 ID: JXMI:WBIK:UT4S:FNEY:AYFZ:3NFT:4F2B:GXLH:LPPN:4YXP:YOUO:OJY5
 Docker Root Dir: /var/lib/docker
 Debug Mode: false
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: false
 Insecure Registries:
  127.0.0.0/8
 Live Restore Enabled: false

*** Run Hello World
    
#+BEGIN_SRC sh
docker run hello-world
#+END_SRC

#+RESULTS:
#+begin_example

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

#+end_example
** Set Up Kubernetes

Get kubernetes from AUR 

#+BEGIN_SRC sh
yay kubernetes-bin
#+END_SRC

Now we create a text file to confirm that kubernetes is running

#+BEGIN_SRC sh
touch pod.yaml
chmod 600 pod.yaml
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh :tangle "pod.yaml"
apiVersion: v1
kind: Pod
metadata:
  name: demo
spec:
  containers:
  - name: testpod
    image: alpine:3.5
    command: ["ping", "8.8.8.8"]
#+END_SRC

This describes a pod with a single container, isolating a ping to 8.8.8.8 

Now create the pod: 

#+BEGIN_SRC sh
kubectl apply -f pod.yaml
#+END_SRC

#+RESULTS:
